% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ask_in_place.R
\name{ask_in_place}
\alias{ask_in_place}
\alias{follow_up_in_place}
\title{Ask for script updates in place}
\usage{
ask_in_place(
  prompt = listen(),
  context = NULL,
  model = getOption("ask.model", "gpt-4o"),
  ...
)

follow_up_in_place(
  prompt = listen(),
  context = NULL,
  conversation = last_conversation(),
  ...
)
}
\arguments{
\item{prompt}{Your request, a string or a character vector that will be
concatenated to a string with line breaks as separators.}

\item{context}{An object of class "ask_context" usually built from a call
to \code{context()} or a \verb{context_*()} function. It is used to define a "system"
message that define the behavior, tone or focus of the assistant.}

\item{model}{The model to choose, see https://platform.openai.com/docs/models
or call \code{all_models()} for chatgpt model, or use ollama models such as
"llama3.1".}

\item{...}{Forwarded to \code{ask()} or \code{follow_up()}}

\item{conversation}{A conversation, initiated by \code{ask()} or followed up by
\code{follow_up()}}
}
\description{
This will change files in place a terminal command in a new terminal, and print extra
information in the R console. \code{context = context_repo()} is often useful
here unless the package is not too big.
}
\examples{
\dontrun{
ask_in_place("update the existing readme with useful missing info", context = context_repo())
}
}
